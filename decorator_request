import ujson
import requests

class Request(object):
    def __init__(self, method, path, h={ "Content-Type": "application/json;charset=UTF-8" }):
        self.path = path
        #print(f"PATH {path}")
        self.method = method.upper()
        self.h = h

    def __call__(self, f):
        def wrapper(obj, *args, **kwargs):
            payload = f(obj, *args, **kwargs)
            #print(f"PAYLOAD {payload}")
            if (payload is not None) and (self.method == "GET" or self.method == "DELETE"):
                dic_key = list(payload.keys())[0]
                self.path = "{}/?{}={}".format(self.path, dic_key, payload[dic_key])
                payload = None
            args = {
                'method': self.method,
                'url': 'http://{}/{}'.format(obj.host, self.path),
                'headers': self.h
            }
            if payload is not None:
                args['json'] = payload
            return requests.request(**args)
        return wrapper

class GetRequest(Request):
    def __init__(self, path, h=None):
        if h is None:
            super().__init__("GET", path)
        else:
            super().__init__("GET", path, h)

class PostRequest(Request):
    def __init__(self, path, h=None):
        if h is None:
            super().__init__("POST", path)
        else:
            super().__init__("POST", path, h)

class PutRequest(Request):
    def __init__(self, path, h=None):
        if h is None:
            super().__init__("PUT", path)
        else:
            super().__init__("PUT", path, h)

class DeleteRequest(Request):
    def __init__(self, path, h=None):
        if h is None:
            super().__init__("DELETE", path)
        else:
            super().__init__("DELETE", path, h)

myToken = 'Secret_key_1234567890'

class DecoRequests(object):
    def __init__(self, host):
        self.host = host

    @GetRequest(path="userlist", h={'access_token':myToken})
    def list_employees(self):
        pass

    @GetRequest(path="users", h={'access_token':myToken})
    def list_employee(self, username):
        return {"username":username}

    @PostRequest(path="users", h={'access_token':myToken})
    def add_employee(self, employee_data):
        return employee_data

    @PutRequest(path="users", h={'access_token':myToken})
    def update_employee(self, employee_data):
        return employee_data

    @DeleteRequest(path="users", h={'access_token':myToken})
    def rm_employee(self, username):
        return {"username":username}
